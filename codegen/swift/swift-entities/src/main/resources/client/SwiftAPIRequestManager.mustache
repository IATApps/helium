import Foundation
import ReactiveCocoa

{{#services}}
enum Route {
{{#funcs}}
  case {{name}}
{{/funcs}}
}

typealias GatewayFactory = (Route, APIService, RequestProvider) -> Gateway
typealias RequestProviderFactory = (Route, RequestProvider) -> RequestProvider


class APIRequestManager {

    let baseURL: NSURL
    let service: APIService
    let requestProviderFactory: RequestProviderFactory?
    let gatewayFactory: GatewayFactory

    static let defaultGatewayFactory: GatewayFactory = { route, service, provider in
        GatewayImpl(apiService: service, requestProvider: provider)
    }

    static let defaultCallBack: RequestProviderFactory = { route, provider in
        provider
    }

    init(
        service: APIService,
        baseURL: NSURL = NSURL(string:"{{location}}")!,
        requestProviderFactory:  RequestProviderFactory = APIRequestManager.defaultCallBack,
        gatewayFactory:  GatewayFactory = APIRequestManager.defaultGatewayFactory
    ) {
        self.service = service
        self.requestProviderFactory = requestProviderFactory
        self.gatewayFactory = gatewayFactory
        self.baseURL = baseURL
    }



{{#funcs}}
  func {{name}}({{#interfaceParams}}{{{name}}}: {{{type}}}{{{delimiter}}}{{/interfaceParams}}) -> SignalProducer<{{return_type}}, APIResponseError<NSError>> {
    return SignalProducer { observer, disposable in
        let originalProvider = {
            return Request(
                url: self.baseURL.URLByAppendingPathComponent("{{path}}")!,
                method: .{{method}},
                encoding: .{{encoding}}{{#hasBodyParams}},
                params:[
                    {{#bodyParams}}
                    "{{name}}": {{name}} as AnyObject{{delimiter}}
                    {{/bodyParams}}
                ]
                {{/hasBodyParams}}
            )
        }

        var requestProvider = originalProvider
        if let factory = self.requestProviderFactory {
            requestProvider = factory(.{{name}}, originalProvider)
        }

        let gateway = self.gatewayFactory(.{{name}}, self.service, requestProvider)
        let cancelable = gateway.requestWithCallback({{return_type}}.transform, callback: self.callbackFor(observer))
        disposable.addDisposable {
            cancelable.cancel()
        }
    }
  }
{{/funcs}}

    func callbackFor<T>(observer: Observer<T, APIResponseError<NSError>>) -> (Result<APIResponse<T>, APIResponseError<NSError>>) -> Void {
        return { result in
            switch result {
            case .Success(let x):
                print("Success:\(x)")
            case .Failure(let y):
                print("Failure:\(y)")
            }
        }
    }

}
{{/services}}