import Foundation

extension NSURLSessionDataTask: Cancellable {}

public struct NSURLSessionAPIService: APIService {

    let session: NSURLSession

    public init() {
        session = NSURLSession(configuration: NSURLSessionConfiguration.defaultSessionConfiguration())
    }

    public func request(request: Request, callback:  (Result<APIResponse<NSData?>, APIResponseError<NSError>>) -> Void) -> Cancellable {

        let urlRequest = convert(fromRequest: request)
        let cancellable = session.dataTaskWithRequest(urlRequest) { (data, urlResponse, error) in
            let httpURLResponse = urlResponse as? NSHTTPURLResponse
            if let error = error {
                callback(.Failure(APIResponseError(error: error, response: urlResponse as? NSHTTPURLResponse)))
                return
            }
            let nsdata = data.flatMap{ NSData(data: $0) }
            callback(.Success(APIResponse(value: nsdata, response: httpURLResponse)))
        }
        cancellable.resume()

        return cancellable
    }

    func convert(fromRequest request: Request) -> NSURLRequest {
        let url = makeUrl(fromRequest: request)

        var mutableRequest = NSMutableURLRequest(URL: url)
        for header in request.headers {
            mutableRequest.addValue(header.1, forHTTPHeaderField: header.0)
        }
        return mutableRequest
    }

    func makeUrl(fromRequest request: Request) -> NSURL {
        switch request.encoding {
        case .URL:
            return url(request.url, withParameters: request.params)
        case .FORM, FORM:
            return request.url
        }
    }

    func url(url:NSURL, withParameters parameters:[String:AnyObject]) -> NSURL {
        let params = parameters.map { key, value in
            "\(key)=\(value)"
        }
        .joinWithSeparator("&")

        return NSURL(string: url.absoluteString! + "?" + params)!
    }
}
