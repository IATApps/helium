note "Twitter API"

def TIMESTAMP_FORMAT = "EEE MMM dd HH:mm:ss Z yyyy"

type "timestamp" spec {
  description "Date and time"
  from("json") {
    asDate(TIMESTAMP_FORMAT)
  }
  to("json") {
    asDate(TIMESTAMP_FORMAT)
  }
}

type 'User' message {
//  id 'int64'
  id_str 'string'
  name 'string'
  profile_image_url 'string'
  is_translator 'bool'
  location 'string'
  created_at 'timestamp'
  favourites_count 'int32'
  url 'string' optional
  utc_offset 'int32' optional
  screen_name 'string'

  entities(skip: true)
  profile_link_color(skip: true)
  follow_request_sent(skip: true)
  profile_background_tile(skip: true)
  profile_sidebar_border_color(skip: true)
  profile_sidebar_fill_color(skip: true)
  default_profile(skip: true)
  contributors_enabled(skip: true)
  profile_image_url_https(skip: true)
  profile_use_background_image(skip: true)
  listed_count(skip: true)
  profile_text_color(skip: true)
  lang(skip: true)
  followers_count(skip: true)
  'protected'(skip: true)
  notifications(skip: true)
  profile_background_image_url_https(skip: true)
  profile_background_color(skip: true)
  verified(skip: true)
  geo_enabled(skip: true)
  time_zone(skip: true)
  description(skip: true)
  default_profile_image(skip: true)
  profile_background_image_url(skip: true)
  statuses_count(skip: true)
  friends_count(skip: true)
  following(skip: true)
  show_all_inline_media(skip: true)
  profile_banner_url(skip: true)
}

type "Tweet" message {
  id 'int64'
  text 'string'
  created_at 'timestamp'
  favorited 'bool'
  favorite_count 'int32'
  truncated 'bool'
  retweeted 'bool'
  possibly_sensitive 'bool' optional
  retweet_count 'int32'
  in_reply_to_user_id 'int64' optional
  in_reply_to_status_id 'int64' optional
  in_reply_to_screen_name 'string' optional
  user 'User'

  [
      'id_str', 'entities', 'in_reply_to_user_id_str', 'in_reply_to_status_id_str',
      'contributors', 'metadata', 'geo', 'place', 'source', 'coordinates', 'lang',
      'retweeted_status'
  ].each {
    "$it"(skip: true)
  }
}

type "SearchResponse" message {
  statuses 'Tweet' sequence
  search_metadata(skip: true)
}

service {

  name "Twitter"

  version "1.1"
  location "https://api.twitter.com/$version"

  get "search/tweets.json" spec {
    parameters {
      q(type: 'string', examples: ['@noradio'])
      count 'int32' optional
      include_entities 'bool' optional
    }
    response 'SearchResponse'
  }

  tests {
    httpHeaders {
      'Authorization' "Bearer AAAAAAAAAAAAAAAAAAAAAJ3PVgAAAAAA%2BPcuieQDv6hOE9SyWM2AOWjIloc%3DU2fCluURs5dnG5A3WaaVhNgiBjXKkV5lynvoquGu7ediOCRWiF"
    }
    useExamples true

    scenario "search for tweets" spec {
      def searchResponse = get "search/tweets.json" with {
        parameters {
          q '#androiddev'
          count 2
          include_entities false
        }
      }

      assert searchResponse.body != null

      def size = searchResponse.body?.statuses?.size()
      assert size == 2 : "Expected 2 statuses, got $size"
      assert searchResponse.body?.statuses?.every { it.user != null }
    }

  }

}
