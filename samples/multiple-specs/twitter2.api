include "$baseDir/common.api"

type "SearchResponse" message {
  statuses 'Tweet' sequence
  search_metadata(skip: true)
}

service {

  name "Twitter"

  version "1.1"
  location "https://$host/$version"

  get "search/tweets.json" spec {
    parameters {
      q(type: 'string', examples: ['@noradio'])
      count 'int32' optional
      include_entities 'bool' optional
    }
    response 'SearchResponse'
  }

  describe "tweets search" spec {
    ['#androiddev', 'stanfy'].each { query ->

      describe "searching $query" spec {
        def searchResponse = service.get "search/tweets.json" with {
          parameters {
            q query
            count 2
            include_entities false
          }
        }

        it "should succeed", {
          searchResponse.mustSucceed()
        }

        it("should return at most 2 results") { searchResponse.body.statuses.size() <= 2 }
        it("should contain user information") {
          searchResponse.body.statuses?.every { it.user != null }
        }

        it("should return 200 status code") {
          assert searchResponse.statusCode == 200 : "Got status $searchResponse.statusCode"
        }

        it "pending spec"
        xit "another pending spec", { false }

      }

    }
  }

  tests {
    httpHeaders {
      'Authorization' "Bearer AAAAAAAAAAAAAAAAAAAAAJ3PVgAAAAAA%2BPcuieQDv6hOE9SyWM2AOWjIloc%3DU2fCluURs5dnG5A3WaaVhNgiBjXKkV5lynvoquGu7ediOCRWiF"
    }
    useExamples true

    scenario "search for tweets" spec {
      def searchResponse = get "search/tweets.json" with {
        parameters {
          q '#androiddev'
          count 2
          include_entities false
        }
      }

      assert searchResponse.body != null

      def size = searchResponse.body?.statuses?.size()
      assert size <= 2 : "Expected at most 2 statuses, got $size"
      assert searchResponse.body?.statuses?.every { it.user != null }
      assert searchResponse.statusCode == 200
    }

  }
}
