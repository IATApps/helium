note "Twitter API"

def TIMESTAMP_FORMAT = "EEE MMM dd HH:mm:ss Z yyyy"

type "timestamp" spec {
  description "Date and time"
  from("json") {
    asDate(TIMESTAMP_FORMAT)
  }
  to("json") {
    asDate(TIMESTAMP_FORMAT)
  }
}

type 'User' message(skipUnknownFields: true) {
  id_str 'string'
  name 'string'
  profile_image_url 'string'
  is_translator 'bool'
  location 'string'
  created_at 'timestamp'
  favourites_count 'int32'
  url 'string' optional
  utc_offset 'int32' optional
  screen_name 'string'
}

type "Tweet" message(skipUnknownFields: true) {
  id 'int64'
  text 'string'
  created_at 'timestamp'
  favorited 'bool'
  favorite_count 'int32'
  truncated 'bool'
  retweeted 'bool'
  possibly_sensitive 'bool' optional
  retweet_count 'int32'
  in_reply_to_user_id 'int64' optional
  in_reply_to_status_id 'int64' optional
  in_reply_to_screen_name 'string' optional
  user 'User'
}

type "SearchResponse" message {
  statuses 'Tweet' sequence
  search_metadata(skip: true)
}

service {

  name "Twitter"

  version "1.1"
  location "https://api.twitter.com/$version"

  get "search/tweets.json" spec {
    parameters {
      q(type: 'string', examples: ['@noradio'])
      count 'int32' optional
      include_entities 'bool' optional
    }
    response 'SearchResponse'
  }

  tests {
    httpHeaders {
      'Authorization' "Bearer AAAAAAAAAAAAAAAAAAAAAJ3PVgAAAAAA%2BPcuieQDv6hOE9SyWM2AOWjIloc%3DU2fCluURs5dnG5A3WaaVhNgiBjXKkV5lynvoquGu7ediOCRWiF"
    }
    useExamples true

    scenario "search for tweets" spec {
      def searchResponse = get "search/tweets.json" with {
        parameters {
          q '#androiddev'
          count 2
          include_entities false
        }
      }

      assert searchResponse.body != null

      def size = searchResponse.body?.statuses?.size()
      assert size == 2 : "Expected 2 statuses, got $size"
      assert searchResponse.body?.statuses?.every { it.user != null }
    }

  }

}

note 'Httpbin service - simply returns all data you sent back to you.'

type 'BaseHttpBinResponse' message {
  data   'string'
  origin 'string'
  url    'string'
}

// form request + response
type 'Person' message {
  name 'string'
  age  'int32'
}

type 'PersonResponse' message(parent: 'BaseHttpBinResponse', skipUnknownFields: true) {
  form 'Person'
}

service {

  name "HttpBin"
  location "http://httpbin.org"

  post "/post" spec {
    response "PersonResponse"
    body form('Person')
  }

  tests {

    scenario 'Send Peter' spec {
      def peterResp = post '/post' with {
        body form {
          name 'Peter Heel'
          age  '5'
        }
      }
      peterResp.mustSucceed()

      def resName = peterResp.body?.form?.name
      def resAge = peterResp.body?.form?.age

      assert resName == "Peter Heel"
      assert resAge == 5
    }
  }
}
